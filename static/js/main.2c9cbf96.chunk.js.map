{"version":3,"sources":["Components/TextArea.jsx","Constants/status.js","Components/StatusDot.jsx","Components/Row.jsx","Components/Table.jsx","Components/Controls.jsx","utils/isValidJson.js","App.js","serviceWorker.js","index.js"],"names":["TextArea","this","props","shouldFocusOnCreate","textArea","focus","_this","react_default","a","createElement","ref","input","className","onChange","name","id","value","Component","NotTested","Failed","Passed","StatusDot","getClass","status","concat","animatedClassName","toolTipText","Row","onClick","onDelete","Components_TextArea","e","case","notes","Components_StatusDot","Table","rows","length","map","x","i","Components_Row","Controls","onFileImportChange","reader","FileReader","readAsText","target","files","onload","content","result","onImportData","style","float","onResetData","document","getElementById","click","onExportJson","onExportTxt","type","isValidJson","str","JSON","parse","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","newState","state","setState","window","localStorage","stringify","filter","onAddNewRow","push","exportData","filename","el","setAttribute","encodeURIComponent","display","body","appendChild","removeChild","exportJsonData","exportTxtData","txtFileContent","join","importData","alert","clearCache","addButtonIsDisabled","Components_Controls","Components_Table","disabled","Boolean","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2c9cbf96.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\n\r\nclass TextArea extends Component {\r\n  componentDidMount(){\r\n    if(this.props.shouldFocusOnCreate){\r\n      this.textArea.focus();\r\n    }\r\n  }\r\n  render() {\r\n    return (\r\n      <textarea\r\n        ref={input => {this.textArea = input;}}\r\n        className=\"row-text-area\"\r\n        onChange={this.props.onChange}\r\n        name={this.props.name}\r\n        id={this.props.id}\r\n        value={this.props.value}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default TextArea;\r\n","export const  NotTested = 'Not tested';\nexport const Failed = 'Failed';\nexport const Passed =  'Passed';\n","import React, { Component } from 'react';\r\n\r\nimport { Passed, Failed } from '../Constants/status';\r\n\r\nclass StatusDot extends Component {\r\n\r\n  getClass = status => {\r\n    if (status === Passed) {\r\n      return 'dot passed';\r\n    } else if (status === Failed) {\r\n      return 'dot failed';\r\n    }\r\n    return 'dot not-tested';\r\n\r\n  }\r\n  render() {\r\n    return (<span className={`${this.getClass(this.props.status)} tooltip animated ${this.props.animatedClassName}`}>\r\n    {\r\n      this.props.toolTipText &&\r\n      <span className=\"tooltiptext\">\r\n        {this.props.toolTipText}\r\n      </span>\r\n    }\r\n      \r\n    </span>)\r\n  }\r\n}\r\n\r\nexport default StatusDot;\r\n","import React, { Component } from \"react\";\r\n\r\nimport TextArea from \"./TextArea\";\r\nimport { NotTested, Passed, Failed } from \"../Constants/status\";\r\nimport StatusDot from \"./StatusDot\";\r\n\r\nclass Row extends Component {\r\n  render() {\r\n    return (\r\n      <tr className=\"animated slideInDown faster\">\r\n        <td className=\"table-id-column u-center\">\r\n          <strong>{this.props.id}</strong>\r\n          <button\r\n            className=\"button-danger pure-button u-margin-left important-active-red\"\r\n            onClick={() => this.props.onDelete(this.props.id)}\r\n          >\r\n            <strong>X</strong>\r\n          </button>\r\n        </td>\r\n        <td>\r\n          <TextArea\r\n            onChange={e => this.props.onChange(e, this.props.id)}\r\n            value={this.props.case}\r\n            name=\"case\"\r\n            shouldFocusOnCreate\r\n          />\r\n        </td>\r\n        <td>\r\n          <TextArea\r\n            onChange={e => this.props.onChange(e, this.props.id)}\r\n            value={this.props.notes}\r\n            name=\"notes\"\r\n          />\r\n        </td>\r\n        <td className=\"table-status-column\">\r\n          <div>\r\n            <StatusDot\r\n              status={this.props.status}\r\n              animatedClassName=\"animated \"\r\n            />\r\n          </div>\r\n          <select\r\n            value={this.props.status}\r\n            name=\"status\"\r\n            onChange={e => this.props.onChange(e, this.props.id)}\r\n          >\r\n            <option value={NotTested}>{NotTested}</option>\r\n            <option value={Failed}>{Failed}</option>\r\n            <option value={Passed}>{Passed}</option>\r\n          </select>\r\n        </td>\r\n      </tr>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Row;\r\n","import React, { Component } from 'react';\r\n\r\nimport Row from './Row';\r\n\r\nclass Table extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.props.rows && this.props.rows.length > 0 &&\r\n          <table className=\"pure-table pure-table-horizontal\">\r\n            <thead>\r\n              <tr>\r\n                <th>#</th>\r\n                <th>Test case</th>\r\n                <th>Notes</th>\r\n                <th></th>\r\n              </tr>\r\n            </thead>\r\n\r\n            <tbody id=\"test-case-table-body\">\r\n              {\r\n                this.props.rows.map((x, i) =>\r\n                  <Row\r\n                    id={i}\r\n                    notes={x.notes}\r\n                    status={x.status}\r\n                    case={x.case}\r\n                    onChange={this.props.onChange}\r\n                    onDelete={this.props.onDelete}\r\n                  />)\r\n              }\r\n            </tbody>\r\n          </table>\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Table;","import React, { Component } from 'react';\r\n\r\n\r\nclass Controls extends Component {\r\n\r\n  onFileImportChange = e => {\r\n    const reader = new FileReader();\r\n    reader.readAsText(e.target.files[0]);\r\n    reader.onload = e => {\r\n      var content = e.target.result;\r\n      this.props.onImportData(content);\r\n    };\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <button style={{ float: \"right\" }} className=\"button-danger pure-button\" onClick={this.props.onResetData}>Reset data</button>\r\n        <div className=\"u-margin-bottom\">\r\n          <button className=\"button-warning pure-button\" onClick={() => document.getElementById(\"fileInput\").click()}>\r\n            Import json\r\n          </button>\r\n          <button className=\"button-secondary pure-button u-margin-left\" onClick={this.props.onExportJson}>\r\n            Export json\r\n          </button>\r\n          <button className=\"button-secondary pure-button u-margin-left\" onClick={this.props.onExportTxt}>\r\n            Export txt\r\n          </button>\r\n          <input type=\"file\" id=\"fileInput\" className=\"u-display-none\" onChange={this.onFileImportChange}/>\r\n        </div>\r\n      </div>);\r\n  }\r\n}\r\n\r\nexport default Controls;\r\n","export const isValidJson = str => {\n  try{\n    JSON.parse(str);\n  } catch(e){\n    return false;\n  }\n  return true;\n}","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport 'purecss';\r\nimport 'animate.css';\r\nimport Table from './Components/Table';\r\nimport Controls from './Components/Controls';\r\nimport { NotTested } from './Constants/status';\r\nimport StatusDot from './Components/StatusDot';\r\nimport { isValidJson } from './utils/isValidJson';\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      rows: []\r\n    };\r\n    if (typeof window !== \"undefined\") {\r\n      if (window.localStorage['test-cases'] && window.localStorage['test-cases'].length > 0) {\r\n        this.state = JSON.parse(window.localStorage['test-cases'])\r\n      }\r\n    }\r\n  }\r\n\r\n  onChange = (e, id) => {\r\n    const newState = this.state;\r\n    newState.rows[id][e.target.name] = e.target.value;\r\n    this.setState(newState);\r\n    window.localStorage['test-cases'] = JSON.stringify(newState);\r\n  }\r\n\r\n  onDelete = id => {\r\n    const newState = this.state;\r\n    newState.rows = this.state.rows.filter((x, i) => i !== id);\r\n    this.setState(newState);\r\n    window.localStorage['test-cases'] = JSON.stringify(newState);\r\n  }\r\n\r\n  onAddNewRow = () => {\r\n    const newState = this.state;\r\n    newState.rows.push({ case: \"\", notes: \"\", status: NotTested });\r\n    this.setState(newState);\r\n  }\r\n\r\n  exportData = (filename, content) => {\r\n    var el = document.createElement('a');\r\n    el.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(content));\r\n    el.setAttribute('download', filename);\r\n    el.style.display = 'none';\r\n    document.body.appendChild(el);\r\n    el.click();\r\n    document.body.removeChild(el);\r\n  }\r\n  exportJsonData = () => {\r\n    this.exportData(\"test-cases.json\", JSON.stringify(this.state, null, '\\t'));\r\n  }\r\n  exportTxtData = () => {\r\n    var txtFileContent = this.state.rows.map((x, i) => `${x.case} \\r\\nNotes: ${x.notes}\\r\\nStatus: ${x.status}\\r\\n-----`).join(\"\\r\\n\");\r\n    this.exportData(\"test-cases.txt\", txtFileContent);\r\n  }\r\n\r\n  importData = content => {\r\n    if (!isValidJson(content)) {\r\n      alert('that\\'s not valid json, is it mate');\r\n      return;\r\n    }\r\n    this.setState(JSON.parse(content));\r\n    window.localStorage['test-cases'] = JSON.stringify(JSON.parse(content));\r\n  }\r\n\r\n  clearCache = () => {\r\n    window.localStorage['test-cases'] = \"\";\r\n    this.setState({ rows: [] });\r\n  }\r\n\r\n  addButtonIsDisabled = () => {\r\n    const rows = this.state.rows;\r\n    if (rows.length > 0) {\r\n      if (rows[rows.length - 1].case.length === 0) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"animated fadeIn\">\r\n        <div className=\"headline u-margin-bottom\">\r\n          <h1>Test cases</h1>\r\n          <span className=\"u-margin-left-xl\">\r\n            {\r\n              this.state.rows.map(x =>\r\n                <StatusDot\r\n                  status={x.status}\r\n                  toolTipText={x.case}\r\n                  animatedClassName=\"fadeInLeft faster\"\r\n                />)\r\n            }\r\n          </span>\r\n        </div>\r\n        <Controls\r\n          onAddNewRow={this.onAddNewRow}\r\n          onExportJson={this.exportJsonData}\r\n          onExportTxt={this.exportTxtData}\r\n          onImportData={this.importData}\r\n          onResetData={this.clearCache}\r\n\r\n        />\r\n        <Table\r\n          rows={this.state.rows}\r\n          onChange={this.onChange}\r\n          onDelete={this.onDelete}\r\n        />\r\n        <button className=\"button-success pure-button important-active-green\" disabled={this.addButtonIsDisabled()} onClick={this.onAddNewRow}>\r\n          Add test case\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}